name: Node.js CI Checks

on:
  pull_request:
    branches: [ main ] # Or your default branch

jobs:
  # Job 1: Run the build
  build:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ job.status }} # Output the final status
    strategy:
      matrix:
        node-version: [18.x] 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run build command
        working-directory: ./frontend
        run: npm run build 

  # Job 2: Run the linter
  lint:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ job.status }} # Output the final status
    strategy:
      matrix:
        node-version: [18.x] 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run lint command
        working-directory: ./frontend
        run: npm run lint

  # Job 3: Generate and post the comment
  generate-comment:
    name: Generate PR Comment
    runs-on: ubuntu-latest
    # This job needs 'build' and 'lint' to finish first
    needs: [build, lint]
    # 'if: always()' ensures this job runs even if 'build' or 'lint' fail
    if: always() 
    
    # Give the job permissions to write comments on PRs
    permissions:
      pull-requests: write 

    steps:
      - name: Get PR Number
        run: echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
        
      - name: Generate comment content
        id: generate-content # Give this step an ID to reference its outputs
        env:
          # Get the 'success' or 'failure' status from the previous jobs
          CI_STATUS: ${{ needs.build.outputs.status }}
          LINT_STATUS: ${{ needs.lint.outputs.status }}
        run: |
          # Generate a temporary file for the comment
          COMMENT_FILE=$(mktemp)

          # --- This is the logic from your image ---
          # We check the job statuses from the 'env' above
          if [ "$CI_STATUS" == "success" ] && [ "$LINT_STATUS" == "success" ]; then
            echo "## ✅ All Checks Passed!" >> $COMMENT_FILE
            echo "" >> $COMMENT_FILE
            echo "**.Status:** ✅ Ready to merge" >> $COMMENT_FILE
            echo "" >> $COMMENT_FILE
            echo "### 🏁 Completed Workflows" >> $COMMENT_FILE
            echo "" >> $COMMENT_FILE
            echo "| Workflow | Status | Details |" >> $COMMENT_FILE
            echo "|:---|:---|:---|" >> $COMMENT_FILE
            echo "| **Continuous Integration** | ✅ Passed | Build completed successfully |" >> $COMMENT_FILE
            echo "| **Code Linting** | ✅ Passed | All formatting and style checks passed |" >> $COMMENT_FILE
            echo "" >> $COMMENT_FILE
            echo "**This PR is ready for review and can be safely merged to \`main\` branch!**" >> $COMMENT_FILE
            echo "" >> $COMMENT_FILE
            echo "Great work! Your code meets all quality standards. 🎉" >> $COMMENT_FILE
          else
            echo "## ❌ Checks Failed" >> $COMMENT_FILE
            echo "" >> $COMMENT_FILE
            echo "**.Status:** 🔴 Not ready to merge" >> $COMMENT_FILE
            echo "" >> $COMMENT_FILE
            echo "Please fix the following issues before merging:" >> $COMMENT_FILE
            echo "" >> $COMMENT_FILE

            # Check for Build failure
            if [ "$CI_STATUS" == "failure" ]; then
              echo "### 🔴 Continuous Integration Failed" >> $COMMENT_FILE
              echo "" >> $COMMENT_FILE
              echo "**Issue:** The build process failed to complete." >> $COMMENT_FILE
              echo "" >> $COMMENT_FILE
              echo "**How to fix:**" >> $COMMENT_FILE
              echo "1. Run \`npm run build\` locally to identify the issue" >> $COMMENT_FILE
              echo "2. Fix any TypeScript compilation errors" >> $COMMENT_FILE
              echo "3. Ensure all dependencies are properly installed" >> $COMMENT_EILE
              echo "4. Test your changes before pushing" >> $COMMENT_FILE
              echo "" >> $COMMENT_FILE
            fi

            # Check for Lint failure
            if [ "$LINT_STATUS" == "failure" ]; then
              echo "### 🔴 Code Linting Failed" >> $COMMENT_FILE
              echo "" >> $COMMENT_FILE
              echo "**Issue:** Code formatting or style checks failed." >> $COMMENT_FILE
              echo "" >> $COMMENT_FILE
              echo "**How to fix:**" >> $COMMENT_FILE
              echo "1. Run \`npm run lint\` or \`npm run format\` locally" >> $COMMENT_FILE
              echo "2. Fix all the reported linting errors" >> $COMMENT_FILE
              echo "3. Test your changes before pushing" >> $COMMENT_FILE
              echo "" >> $COMMENT_FILE
            fi
          fi
          # --- End of image logic ---

          # This line reads the content of the file and sets it as an output for this step
          # The 'EOF' markers help handle the multi-line text
          echo "comment-body<<EOF" >> $GITHUB_OUTPUT
          cat $COMMENT_FILE >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post or Update PR Comment
        uses: peter-evans/create-or-update-comment@v4
        with:
          # Use the PR number from the first step
          issue-number: ${{ env.PR_NUMBER }}
          # Use the 'comment-body' output from the 'generate-content' step
          body: ${{ steps.generate-content.outputs.comment-body }}
          # This makes the action find and edit its *own* last comment
          # instead of posting a new one every time
          edit-mode: replace
