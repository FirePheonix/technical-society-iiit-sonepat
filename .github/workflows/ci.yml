name: Node.js CI Checks

permissions:
  contents: read
  pull-requests: write
  issues: write

on:
  pull_request_target:
    branches: [ main ]
  workflow_dispatch:
  issue_comment:
    types: [created]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    name: Build Frontend
    runs-on: ubuntu-latest
    outputs:
      status: ${{ job.status }}
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci || npm install
        working-directory: ./frontend
      - run: npm run build
        working-directory: ./frontend

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    outputs:
      status: ${{ job.status }}
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - run: npm ci || npm install
        working-directory: ./frontend
      - run: npm run lint
        working-directory: ./frontend

  generate-comment:
    name: Generate PR Comment
    runs-on: ubuntu-latest
    needs: [build, lint]
    if: always()
    permissions:
      pull-requests: write
      issues: write
    steps:
      - id: generate-content
        env:
          CI_STATUS: ${{ needs.build.outputs.status }}
          LINT_STATUS: ${{ needs.lint.outputs.status }}
        run: |
          COMMENT_FILE=$(mktemp)
          if [ "$CI_STATUS" == "success" ] && [ "$LINT_STATUS" == "success" ]; then
            echo "## ✅ All Checks Passed!" >> $COMMENT_FILE
            echo "" >> $COMMENT_FILE
            echo "**.Status:** ✅ Ready to merge" >> $COMMENT_FILE
            echo "" >> $COMMENT_FILE
            echo "### 🏁 Completed Workflows" >> $COMMENT_FILE
            echo "" >> $COMMENT_FILE
            echo "| Workflow | Status | Details |" >> $COMMENT_FILE
            echo "|:---|:---|:---|" >> $COMMENT_FILE
            echo "| **Continuous Integration** | ✅ Passed | Build completed successfully |" >> $COMMENT_FILE
            echo "| **Code Linting** | ✅ Passed | All formatting and style checks passed |" >> $COMMENT_FILE
            echo "" >> $COMMENT_FILE
            echo "**This PR is ready for review and can be safely merged to \`main\` branch!**" >> $COMMENT_FILE
            echo "" >> $COMMENT_FILE
            echo "Great work! Your code meets all quality standards. 🎉" >> $COMMENT_FILE
          else
            echo "## ❌ Checks Failed" >> $COMMENT_FILE
            echo "" >> $COMMENT_FILE
            echo "**.Status:** 🔴 Not ready to merge" >> $COMMENT_FILE
            echo "" >> $COMMENT_FILE
            echo "Please fix the following issues before merging:" >> $COMMENT_FILE
            echo "" >> $COMMENT_FILE
            if [ "$CI_STATUS" == "failure" ]; then
              echo "### 🔴 Continuous Integration Failed" >> $COMMENT_FILE
              echo "" >> $COMMENT_FILE
              echo "**Issue:** The build process failed to complete." >> $COMMENT_FILE
              echo "" >> $COMMENT_FILE
              echo "**How to fix:**" >> $COMMENT_FILE
              echo "1. Run \`npm run build\` locally" >> $COMMENT_FILE
              echo "2. Fix any TypeScript compilation errors" >> $COMMENT_FILE
              echo "3. Ensure all dependencies are installed" >> $COMMENT_FILE
              echo "4. Test changes before pushing" >> $COMMENT_FILE
              echo "" >> $COMMENT_FILE
            fi
            if [ "$LINT_STATUS" == "failure" ]; then
              echo "### 🔴 Code Linting Failed" >> $COMMENT_FILE
              echo "" >> $COMMENT_FILE
              echo "**Issue:** Code formatting or style checks failed." >> $COMMENT_FILE
              echo "" >> $COMMENT_FILE
              echo "**How to fix:**" >> $COMMENT_FILE
              echo "1. Run \`npm run lint\` or \`npm run format\` locally" >> $COMMENT_FILE
              echo "2. Fix all reported linting errors" >> $COMMENT_FILE
              echo "3. Test changes before pushing" >> $COMMENT_FILE
              echo "" >> $COMMENT_FILE
            fi
          fi
          echo "comment-body<<EOF" >> $GITHUB_OUTPUT
          cat $COMMENT_FILE >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - uses: peter-evans/create-or-update-comment@v4
        if: github.event_name == 'pull_request_target'
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.generate-content.outputs.comment-body }}
          edit-mode: replace
